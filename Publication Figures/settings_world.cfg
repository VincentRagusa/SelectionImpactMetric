% WORLD
  debug = 0                                  #(bool) run world in debug mode (if available)
  worldType = FFASpatial                     #(string) world to be used, [FFASpatial, Test]

% WORLD_FFASpatial
  dimension = 1                              #(int) 1 (line) or 2 (plain)
  generations = 100000                       #(int) 
  genomeToScoreMap = -.75,-0.25,1 #(string) function to convert genome to score, to enable more then one gene, seperate functions with '_'
  #genomeToScoreMap = -0.08,-0.16,-0.24,-0.32,-0.4,1 #(string) function to convert genome to score, to enable more then one gene, seperate functions with '_'
  initPop = -1,0                         #(string) how to initalize genomes[0] (other sites init to 0)
  #initPop = 5,6_-1,0                         #(string) how to initalize genomes[0] (other sites init to 0)
                                             #  e.g., 4,3x1,6 => 4 with genome[0] = 3, 1 with genome[0] = 6, (n-5) with genome[0] = 0.
                                             #  A negitive count value in the last position sets remainder of population.
                                             #  e.g., 1,2x-1,1 => 1 with genome[0] = 2, (n-1) with genome[0] = 1.
                                             #  A negitive genome value sets genomes to (-1 * value * length of G2S_Map)unset genomes have value 0, genome values
                                             #  must be int
  mutationRate = 0.004                     #(double) 
  #mutationRate = 0.05                      #(double) 
  neighborhoodDistance = -1                   #(int) defines agents that may be part of a group (distance from current offspring location)
                                             #  if dimension = 1, then neighboorhood size = (2 * neighborhoodDistance) + 1
                                             #  if dimension = 2, then neighboorhood size = ((2 * neighborhoodDistance) + 1)^2
                                             #  -1 indicated entire population
                                             #  if neighboorhood size is > population size then neighboorhood size is set to population size
  populationSize = 100000                      #(int) 
  repeats = 100                              #(int) number of times to run simulation
  selectionGroupSize = -1                  #(double) number of agents to use from neighborhood, can be double (resulting in randomized group size)
                                             #  if -1 use entire neighboorhood
                                             #  if -1 < selectionGroupSize < 0 then actual group size = -selectionGroupSize * neighboorhood size
                                             #  must be <= neighboorhood size
  selectionMethod = roulette                 #(string) tournament vs. roulette vs. roulette_c
  selectionValue = 2                       #(double) if roulette then value is b where fitness is calculated as b^score
                                             #  if roulette_c then value is c where fitness is calculated as max(0,score - (max-c))
                                             #  if tournament, this value is ignored
  shuffle = 1                                #(bool) if true, shuffle order of population every generation just before reproduction

% WORLD_FFASpatial_Data
  ascentOverCountLimit = 100                 #(int) time that a valley crossing is observed (i.e. last position in genomeToScore[0]) before we assume establishment
                                             #  and record and ascent or ttfe
  checkMarkers = 0                           #(bool) check to see if markers have fixed, move to next repeat if they have
  saveAncestry = 0                           #(int) if >= 1, save ancestry when update%saveAncestry = 0
  saveOffspringCounts = 1                    #(bool) if True, save offspring counts, if used with saveAncestry, then saveAncestry must be set to 1
  savePop = 1                                #(int) if >= 1, save pop files when update%savePop = 0
  saveSnapshot = 0                           #(int) if >= 1, save genome, score, and marker snapshots when update%saveSnapshots = 0
  trackTTFE = 0                              #(bool) if true, when at least one agent in pop has genome[0] value is >= size of genomeToScoreMap[0] for ascentOverCountLimit
                                             #  generations, stop repeat and save ttfe data.
                                             #  ONLY looks at first site in genome!

% WORLD_FFASpatial_OLG
  OLG = 0                                    #(bool) if false, generations are descrete
                                             #  if true, generations overlap:
                                             #  either roulette or roulette_c must be used (not tournament)
                                             #  agents recive (fitness/(total group fitness)) resource for each group they are part of (on average 1 resource per
                                             #  agent per generation).
                                             #  Agents with OLG_ReproCost resource will pay ReproCost and will have a chance to reproduce in random order, replacing
                                             #  a differnt agent in their nehborhood.
                                             #  Agents that are replaced before they reproduce do not reproduce.
  OLG_Distance = -1                          #(int) if OLG == true, offspring will be placed within OLG_Distance from parent, -1 sets OLG_Distance = neighborhoodDistance.
                                             #  -2 sets to well mixed (i.e, 1/2 world size)
  OLG_Divide = 0                             #(bool) if OLG == true, when offspring are produced, parent will also be replace by mutated offspring, to simulate
                                             #  division process
  OLG_ReproCost = 2.0                        #(double) if OLG == true, agents can reproduce when they collect this much resource, roughly number of generations
                                             #  for the average agent to reproduce.

% WORLD_TEST
  evaluationsPerGeneration = 1               #(int) Number of times to test each Genome per generation (useful with non-deterministic brains)
  mode = 0                                   #(int) 0 = bit outputs before adding, 1 = add outputs
  numberOfOutputs = 10                       #(int) number of outputs in this world

% WORLD_TEST_NAMES
  brainNameSpace = root::                    #(string) namespace for parameters used to define brain
  groupNameSpace = root::                    #(string) namespace of group to be evaluated

